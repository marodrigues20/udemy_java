Insertion in Circular Double Linked List:

InsertInLinkedList(head, nodeValue, Location):
  create a blank node
  node.value = nodeValue;
  if ( ! existsLinkedList(head))
    return error //Linked List does not exist
  else if ( location equals 0 ) //insert at first position
    node.next = head; node.prev = tail;
    head.prev = node
    head=node; tail.next=node;
  else if( location equals last ) //insert at last position
    node.next = head; node.prev = tail
    head.prev = node;
    last.next = node;
    tail = node //to keep track of last node
  else //insert at specified location
    loop: tmpNode = 0 to location -1 //loop till we reach specified node
    node.next = tmpNode.next; node.prev = tmpNode;
    tmpNode.next = node; node.next.prev = node;

--------------------------------------------------------------------------------

InsertInLinkedList(head, nodeValue, Location):
  create a blank node --------------------------------------------- O(1)
  node.value = nodeValue; ----------------------------------------- O(1)
  if ( ! existsLinkedList(head)) ---------------------------------- O(1)
    return error //Linked List does not exist --------------------- O(1)
  else if ( location equals 0 ) //insert at first position -------- O(1)
    node.next = head; node.prev = tail; --------------------------- O(1)
    head.prev = node ---------------------------------------------- O(1)
    head=node; tail.next=node; ------------------------------------ O(1)
  else if( location equals last ) //insert at last position ------- O(1)
    node.next = head; node.prev = tail ---------------------------- O(1)
    head.prev = node; --------------------------------------------- O(1)
    last.next = node; --------------------------------------------- O(1)
    tail = node //to keep track of last node ---------------------- O(1)
  else //insert at specified location ------------------------------------------------- O(1)
    loop: tmpNode = 0 to location -1 //loop till we reach
    //specified node  --------------------------------------------- O(n)
    node.next = tmpNode.next; node.prev = tmpNode; ---------------- O(1)
    tmpNode.next = node; node.next.prev = node; ------------------- O(1)

Time Complexity - O(n)
Space Complexity - O(1)


-------------------------------------------------------------------------------
