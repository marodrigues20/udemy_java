Deletion of node from Circular Double Linked List:

DeletionOfNode(head,Location):
  if(!existsLinkedList(head))
    return error //Linked List does not exists
  else if (location equals 0) //we want to delete first element
    if this was the only element in list, then update head.next = head.prev = head = tail = null; return
    head = head.next; head.prev = tail; tail.next = head;
  else if (location >= last)
    if this was only element , then update head.next = head.prev = head = tail = null; return
    tail = tail.prev; tail.next = head; head.prev=tail
  else // if any internal node needs to be deleted
    loop: tmpNode = start to location - 1 //we need to traverse till we find the previous Location
    tmp.Node.next = tmpNode.next.next //delete the require node
    tmpNode.next.prev = tmpNode

-------------------------------------------------------------------------------
Time Complexity = Deletion of node from Circular Double Linked List

DeletionOfNode(head,Location):
  if(!existsLinkedList(head)) ------------------------------------------------------------------------------- O(1)
    return error //Linked List does not exists -------------------------------------------------------------- O(1)
  else if (location equals 0) //we want to delete first element --------------------------------------------- O(1)
    if this was the only element in list, then update head.next = head.prev = head = tail = null; return ---- O(1)
    head = head.next; head.prev = tail; tail.next = head; --------------------------------------------------- O(1)
  else if (location >= last) -------------------------------------------------------------------------------- O(1)
    if this was only element , then update head.next = head.prev = head = tail = null; return  -------------- O(1)
    tail = tail.prev; tail.next = head; head.prev=tail ------------------------------------------------------ O(1)
  else // if any internal node needs to be deleted ---------------------------------------------------------- O(1)
    loop: tmpNode = start to location - 1 //we need to traverse till we find the previous Location ---------- O(n)
    tmp.Node.next = tmpNode.next.next //delete the require node --------------------------------------------- O(1)
    tmpNode.next.prev = tmpNode ----------------------------------------------------------------------------- O(1)

Time Complexity - O(n)
Time Space - O(1)
