Deletion of Node from Circular Single Linked List:

DeletionOfNode(head, Location):
  if (!existsLinkedList(head))
      return error //Linked List does not exists
  else if ( location equals 0 ) //we want to delete first element
      head = head.next; tail.next = head
      if this was the only element in list, then update head = tail = node.next = null;
  else if ( location  >= last)
      if (current node is only node is list) then, head = tail = node.next = null, return;
      loop till 2nd last node (tmpNode)
      tail = tmpNode; tmpNode.next = head
  else // if any internal node needs to be deleted
      loop: tmpNode = start to location - 1 //we need to traverse till we find the previous location
      tmpNode.next = tmpNode.next.next //delete the required node



---------------------------------------------------------------------------------

Time Complexity - Deletion of node from Circular Single Linked List:


DeletionOfNode(head, Location):
  if (!existsLinkedList(head)) ------------------------------------------------------------------------------ O(1)
      return error //Linked List does not exists ------------------------------------------------------------ O(1)
  else if ( location equals 0 ) //we want to delete first element ------------------------------------------- O(1)
      head = head.next; tail.next = head -------------------------------------------------------------------- O(1)
      if this was the only element in list, then update head = tail = node.next = null; --------------------- O(1)
  else if ( location  >= last) ------------------------------------------------------------------------------ O(1)
      if (current node is only node is list) then, head = tail = node.next = null, return; ------------------ O(1)
      loop till 2nd last node (tmpNode) --------------------------------------------------------------------- O(n)
      tail = tmpNode; tmpNode.next = head ------------------------------------------------------------------- O(1)
  else // if any internal node needs to be deleted ---------------------------------------------------------- O(1)
      loop: tmpNode = start to location - 1 //we need to traverse till we find the previous location -------- O(n)
      tmpNode.next = tmpNode.next.next //delete the required node ------------------------------------------- O(1)


Time Complexity - O(n)
Space Complexity - (1)

-------------------------------------------------------------------------------
