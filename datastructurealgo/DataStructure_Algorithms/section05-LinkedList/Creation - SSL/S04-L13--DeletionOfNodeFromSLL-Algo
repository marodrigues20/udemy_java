Deletion of Node from Single Linked List:



DeletionOfNode(head, Location):
  if (!existsLinkedList(head))
    return error//Linked List does not exists
  else if ( location equals 0) //we want to delete first node
    head = head.next;
    if this was the only element in list then update tail = null;
  else if (location >= last)
    if (current node is only node in list) then, head = tail = null; return;
    loop till 2nd last node (tmpNode)
    tail = tmpNode; tmpNode.next = null;
  else //if any internal node needs to be deleted
    loop: tmpNode = start to location -1 //we need to travese till we find the previous location
    tmpNode.next = tmpNode.next.next //delete the require node

--------------------------------------------------------------------------------

Time Complexity - Deletion of node from Single Linked List:

DeletionOfNode(head, Location):
  if (!existsLinkedList(head)) ---------------------------------------------------------------------- O(1)
    return error//Linked List does not exists ------------------------------------------------------- O(1)
  else if ( location equals 0) //we want to delete first node --------------------------------------- O(1)
    head = head.next; ------------------------------------------------------------------------------- O(1)
    if this was the only element in list then update tail = null; ----------------------------------- O(1)
  else if (location >= last) ------------------------------------------------------------------------ O(1)
    if (current node is only node in list) then, head = tail = null; return; ------------------------ O(1)
    loop till 2nd last node (tmpNode) --------------------------------------------------------------- O(n)
    tail = tmpNode; tmpNode.next = null; ------------------------------------------------------------ O(1)
  else //if any internal node needs to be deleted --------------------------------------------------- O(1)
    loop: tmpNode = start to location -1 //we need to travese till we find the previous location ---- O(1)
    tmpNode.next = tmpNode.next.next //delete the require node -------------------------------------- O(1)


Time Complexity - O(n)
Space Complexity - O(1)
