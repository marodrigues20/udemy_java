Insertion in Double Linked List:

InsertInLinkedList(head, nodeValue, Location):
create a blank node
node.value = nodeValue;
if(!existLinkedList(head))
  return error //Linked List does not exists
else if (location equals 0) //insert at first position
  node.next = head;
  node.prev = null;
  head.next = node;
  head = node;
else if (location equals last) //insert at last position
  node.next = null;
  node.prev = tail;
  tail.next = node;
  tail = node;
else //insert at specified location
  loop: tmpNode = 0 to location-1
  node.next = tmpNode.next; node.prev = tmpNode;
  tmpNode.next = node; node.next.prev = node

-------------------------------------------------------------------------------
Time Complexity - Insertion in Double Linked List:

InsertInLinkedList(head, nodeValue, Location):
create a blank node ------------------------------------------------- O(1)
node.value = nodeValue; --------------------------------------------- O(1)
if(!existLinkedList(head)) ------------------------------------------ O(1)
  return error //Linked List does not exists ------------------------ O(1)
else if (location equals 0) //insert at first position -------------- O(1)
  node.next = head; ------------------------------------------------- O(1)
  node.prev = null; ------------------------------------------------- O(1)
  head.next = node; ------------------------------------------------- O(1)
  head = node; ------------------------------------------------------ O(1)
else if (location equals last) //insert at last position  ----------- O(1)
  node.next = null; ------------------------------------------------- O(1)
  node.prev = tail; ------------------------------------------------- O(1)
  tail.next = node; ------------------------------------------------- O(1)
  tail = node; ------------------------------------------------------ O(1)
else //insert at specified location  -------------------------------- O(1)
  loop: tmpNode = 0 to location-1 ----------------------------------- O(n)
  node.next = tmpNode.next; node.prev = tmpNode; -------------------- O(1)
  tmpNode.next = node; node.next.prev = node ------------------------ O(1)

Time Complexity - O(n)
Space Complexity - O(1)

-------------------------------------------------------------------------------
